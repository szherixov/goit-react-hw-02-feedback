{"version":3,"sources":["Components/Statistics/statistics.module.css","Components/Statistics/Statistics.jsx","Components/Option/Option.jsx","Components/Notification/Notification.jsx","Components/Section/Section.jsx","App.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","total","positivePercentage","className","styles","container","item","Options","options","onLeaveFeedback","button","map","typr","value","onClick","prototype","PropTypes","arrayOf","string","isRequired","func","Notification","message","Section","title","children","App","state","buttonsOption","onClickButton","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","this","Option","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,UAAY,gC,8ICW/CC,MAVf,YAAuE,IAAjDC,EAAgD,EAAhDA,KAAMC,EAA0C,EAA1CA,QAASC,EAAiC,EAAjCA,IAAKC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,mBAC7C,OAAO,qBAAIC,UAAWC,IAAOC,UAAtB,UACP,6BAAI,oBAAGF,UAAWC,IAAOE,KAArB,kBAAiCR,OACrC,6BAAI,oBAAGK,UAAWC,IAAOE,KAArB,qBAAoCP,OACxC,6BAAI,oBAAGI,UAAWC,IAAOE,KAArB,iBAAgCN,OACpC,6BAAI,oBAAGG,UAAWC,IAAOE,KAArB,mBAAkCL,OACtC,6BAAI,oBAAGE,UAAWC,IAAOE,KAArB,+BAA8CJ,EAA9C,a,gBCNR,SAASK,EAAT,GAAgD,IAA7BC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,gBACpBC,EAASF,EAAQG,KAAI,SAAAD,GAAM,OAC/B,6BACE,wBAAQE,KAAK,SAASC,MAAOH,EAAQI,QAAS,kBAAML,EAAgBC,IAApE,SACGA,KAFKA,MAMZ,OACE,6BACKA,IAMTH,EAAQQ,UAAY,CAChBP,QAASQ,IAAUC,QAAQD,IAAUE,QAAQC,WAC7CV,gBAAiBO,IAAUI,KAAKD,YAGrBZ,QCrBf,SAASc,EAAT,GAAkC,IAAXC,EAAU,EAAVA,QACnB,OACI,yCAAG,4BAAIA,IAAP,OAGRD,EAAaN,UAAY,CACrBO,QAASN,IAAUE,OAAOC,YAEfE,QCJAE,MANf,YAAuC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACtB,OAAO,oCAAS,4BAAID,IAAYC,MCK9BC,E,4MACJC,MAAQ,CACN7B,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEP4B,cAAgB,CAAC,OAAQ,UAAW,O,EAEpCC,cAAgB,SAAAnB,GACd,EAAKoB,UAAS,SAAAH,GAAK,kCACdA,GADc,kBAEhBjB,EAASiB,EAAMjB,GAAU,Q,EAI9BqB,mBAAqB,WACnB,MAA+B,EAAKJ,MACpC,OADA,EAAQ7B,KAAR,EAAcC,QAAd,EAAuBC,K,EAIzBgC,gCAAkC,WAChC,OAAOC,KAAKC,MAAO,EAAKP,MAAM7B,KAAO,EAAKiC,qBAAwB,M,4CAEpE,WACE,MAA+BI,KAAKR,MAA5B7B,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACvB,OACE,qCACE,cAAC,EAAD,CAASwB,MAAM,wBAAf,SACE,cAACY,EAAD,CACE5B,QAAS2B,KAAKP,cACdnB,gBAAiB0B,KAAKN,kBAG1B,cAAC,EAAD,CAASL,MAAM,YAAf,SACGW,KAAKJ,qBACJ,cAAC,EAAD,CACEjC,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOkC,KAAKJ,qBACZ7B,mBAAoBiC,KAAKH,oCAG3B,cAAC,EAAD,CAAcV,QAAQ,kC,GA3ChBe,aAmDHX,ICpDfY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.cc07a673.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"statistics_item__2e6kw\",\"container\":\"statistics_container__2xJoz\"};","import styles from './statistics.module.css'\n\nfunction Statistics({ good, neutral, bad, total, positivePercentage }){\n    return <ul className={styles.container}>\n    <li><p className={styles.item}>Good:{good}</p></li>\n    <li><p className={styles.item}>Neutral:{neutral}</p></li>\n    <li><p className={styles.item}>Bad:{bad}</p></li>\n    <li><p className={styles.item}>Total:{total}</p></li>\n    <li><p className={styles.item}>Positive feedback:{positivePercentage}%</p></li>\n</ul>;\n}\n\nexport default Statistics;","import PropTypes from \"prop-types\"\n\nfunction Options({ options, onLeaveFeedback }) {\n  const button = options.map(button => (\n    <li  key={button}>\n      <button typr=\"button\" value={button} onClick={() => onLeaveFeedback(button)}  >\n        {button}\n      </button>\n    </li>\n  ))\n  return (\n    <ul >\n        {button}\n    </ul> \n\n    )\n}\n\nOptions.prototype = {\n    options: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onLeaveFeedback: PropTypes.func.isRequired\n}\n\nexport default Options;","import PropTypes from \"prop-types\"\n\nfunction Notification({message}) {\n    return (\n        <> <p>{message}</p> </>\n) };\n\nNotification.prototype = { \n    message: PropTypes.string.isRequired   \n}\nexport default Notification;\n","function Section({ title, children }) {\n    return <section><p>{title}</p>{ children }</section>\n    \n    \n}\n\nexport default Section;","import React, { Component } from 'react';\nimport Statistics from './Components/Statistics/Statistics';\nimport Options from './Components/Option/Option';\nimport Notification from './Components/Notification/Notification';\nimport Section from './Components/Section/Section';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  buttonsOption = ['good', 'neutral', 'bad'];\n\n  onClickButton = button => {\n    this.setState(state => ({\n      ...state,\n      [button]: state[button] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good / this.countTotalFeedback()) * 100);\n  };\n  render() {\n    const { good, neutral, bad } = this.state;\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <Options\n            options={this.buttonsOption}\n            onLeaveFeedback={this.onClickButton}\n          ></Options>\n        </Section>\n        <Section title=\"Statistic\">\n          {this.countTotalFeedback() ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            ></Statistics>\n          ) : (\n            <Notification message=\"There is no feedback\"></Notification>\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n\n// комментарий ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}